import config
import random

import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

import requests
from bs4 import BeautifulSoup

from pyrogram import Client
import time

api_id = 28639961
api_hash = "bc72e8794b9069f1ec89fa9b8e8e5d93"
chat_id = -1001879606431
app = Client("ParserGPT", api_id, api_hash)

TG_API = "6683690512:AAFXQZpeKOdZfOPI9rhExAKwaLpdY73SecQ"
token = "vk1.a.JUsxF96n75AgNnsks_423GLynhKYneVDoF7xXk3A9hsJH7gb7NhMnDlIZj3CrPS0VoodJV8K3FGA7soRYDkRBN3Odgr6gTcl3wfRDD97CQHdy01HVYGS-jffbo1FN2msfyOmxo7WbU7SensyDtdmK0yiVoy_jRSl05iHtPgNCUy2QEk5JhrIo31EoPe2g8dOTS9oXhR5gFNsRCtQDKMXEA"
session = vk_api.VkApi(token=token)
session_api = session.get_api()
longpoll = VkBotLongPoll(session, 222855908)

starts = ["!", "/", "—ç–Ω–¥–∏", "—ç–Ω"]
admins_id = []
response_list = []

class Bot:
    class Functions: 
        def __init__(self, ConversationItems):
            self.ConversationItems = ConversationItems

        @staticmethod
        def sender(chat_id, text):  
            session_api.messages.send(chat_id=chat_id, message=text, random_id=0)

        @staticmethod
        def kicker_from_msg(chat_id, member_id):  
            session_api.messages.removeChatUser(
                chat_id=chat_id,
                member_id=member_id,
            )

        @staticmethod
        def parser_jocks():  
            headers = {
                'user-agent':
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.109 Safari 537.36 OPR/84.0.4316.52'
            }
            url = 'https://www.anekdot.ru/random/anekdot/'
            r = requests.get(url=url, headers=headers)
            soup = BeautifulSoup(r.text, 'html.parser')
            anecdot = soup.find_all('div', class_="text")
            
            for article in anecdot:
                article_title = article.text.strip()

            return article_title

        def get_admin_id_list(self):  
            for member in self.ConversationItems:
                try:
                    if member["is_admin"]:
                        admins_id.append(member["member_id"])
                except Exception as E:
                    print("Err: " + str(E))
        
        def parserGPT(msg):
            def send_message(chat_id, message):
                with app:
                    app.send_message(chat_id, message)

            def get_last_response(chat_id):
                with app:
                    while True:
                        messages = app.get_chat_history(chat_id, limit=1)
                        messages = list(messages)
                        last_message = messages[0] if messages else None
                        last_message = last_message.text
                        if last_message == "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å...":
                            time.sleep(0.5)
                        else:
                            break

                    return last_message

            send_message(chat_id, f"/ask {msg}")
            response = get_last_response(chat_id)
            response_list.append(response)
            print(response_list)

            app.stop()

    @staticmethod
    def process():
        for event in longpoll.listen():  
            try:
                if event.type == VkBotEventType.MESSAGE_NEW and event.from_chat:
                    msg = event.object['text'].lower()     
                    print(msg)
                    chat_id = event.chat_id
                    member_id = event.object['from_id']

                    print(f"Member id from chat message: {member_id}")

                    ConversationItems = session_api.messages.getConversationMembers(peer_id=event.object.peer_id, chat_id=chat_id)["items"]
                    user = session_api.users.get(user_ids=member_id)

                    try:
                        if event.object.action['type'] == 'chat_invite_user':
                            Bot.Functions.sender(chat_id, "–ü—Ä–∏–≤–µ—Ç, —è –≠–Ω–¥–∏, –ø–æ–º–æ—â–Ω–∏–∫ –ø–µ—Ä–≤–æ–π —à–∫–æ–ª—ã.‚úåÔ∏è) –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"–ø–æ–º–æ—â—å\" –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.")
                    except:
                        pass

                    try:
                        if event.object.action['type'] == 'chat_invite_user_by_link':
                            Bot.Functions.sender(chat_id, "–ü—Ä–∏–≤–µ—Ç, —è –≠–Ω–¥–∏, –ø–æ–º–æ—â–Ω–∏–∫ –ø–µ—Ä–≤–æ–π —à–∫–æ–ª—ã.‚úåÔ∏è) –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"–ø–æ–º–æ—â—å\" –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.")
                    except:
                        pass

                    try:
                        if event.object.action['type'] == 'chat_kick_user':
                            Bot.Functions.sender(chat_id, "–ü–æ–∫–∞, –ø–æ–∫–∞!üñêÔ∏è")
                    except:
                        pass

                    if int(msg.find("–¥–∞—É–Ω")) >= 0 or int(msg.find("–¥–∞–ª–±–∞–µ–±")) >= 0 or int(msg.find("–¥–∏–±–∏–ª")) >= 0 or int(msg.find("–µ–±–ª–∞–Ω")) >= 0 or int(msg.find("–∫–æ–Ω—á–µ–Ω–Ω—ã–π")) >= 0:
                        Bot.Functions.sender(chat_id, f"@id{member_id} (–ù–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –Ω–∏–∫–æ–≥–æ! –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ, —Ç–æ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∏–∫–ª—é—á–µ–Ω—ã –∏–∑ –±–µ—Å–µ–¥—ã!)")

                    elif msg.startswith(tuple(starts)):
                        msg = msg.split(" ")
                        try:
                            if msg[1] in ["–∫–∏–∫", "–∏—Å–∫–ª—é—á–∏—Ç—å", "—É–±—Ä–∞—Ç—å"]: 
                                Bot.Functions(ConversationItems).get_admin_id_list()
                                if member_id in admins_id:
                                    Bot.Functions.kicker_from_msg(chat_id=chat_id, member_id=event.object.reply_message['from_id'])
                                else:
                                    Bot.Functions.sender(chat_id, f"@id{member_id} (–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.)")

                            elif msg[1] == "–ø—Ä–∞–≤–∏–ª–∞":
                                Bot.Functions.sender(chat_id, "üìã–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–µ: \n1. –¢–æ–∫—Å–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –ö —Ç–æ–∫—Å–∏—á–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∏ —É–Ω–∏–∂–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å—Å–æ—Ä—ã –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏. \n2. –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –ö —Ç–∞–∫–∏–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è: –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–∏–ª–∏–µ, –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –∫—É—Ä–µ–Ω–∏—è –∏–ª–∏ –∞–ª–∫–æ–≥–æ–ª–∏–∑–º–∞. \n3. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à—É —Ä–µ—á—å, –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è –ª–µ–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∞—Å. \n4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–µ—Å–µ–¥—ã –Ω–µ –º–æ–≥—É—Ç —Ä–∞–∑–≥–ª–∞—à–∞—Ç—å —á—Ç–æ-–ª–∏–±–æ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –±–µ—Å–µ–¥—ã. ")

                            elif msg[1] == "–º–æ–Ω–µ—Ç–∫–∞":
                                numbers = [0, 1]
                                if random.choice(numbers) == 0:
                                    Bot.Functions.sender(chat_id, "–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞!")
                                else:
                                    Bot.Functions.sender(chat_id, "–í—ã–ø–∞–ª –æ—Ä–µ–ª!")

                            elif msg[1] in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]:
                                numbers = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
                                randome = random.choice(numbers)
                                if randome == msg[1]:
                                    Bot.Functions.sender(chat_id, randome)
                                    Bot.Functions.sender(chat_id, "–£–ø—Å! –ù–∏—á—å—è!")
                                elif (randome == "–∫–∞–º–µ–Ω—å" and msg[1] == "–±—É–º–∞–≥–∞") or (randome == "–±—É–º–∞–≥–∞" and msg[1] == "–Ω–æ–∂–Ω–∏—Ü—ã") or (randome == "–Ω–æ–∂–Ω–∏—Ü—ã" and msg[1] == "–∫–∞–º–µ–Ω—å"):
                                    Bot.Functions.sender(chat_id, randome)
                                    Bot.Functions.sender(chat_id, f"@id{member_id} (–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏.üòÖ))")
                                else:
                                    Bot.Functions.sender(chat_id, randome)
                                    Bot.Functions.sender(chat_id, "–£—Ä–∞, —É—Ä–∞, —è –≤—ã–∏–≥—Ä–∞–ª!üòé)")

                            elif msg[1] in ["–ø–æ–¥–∫–∞—Ç–∏", "–∑–∞–ø–∏–∫–∞–ø—å", "–ø–æ–¥–∫–∞—Ç"]:
                                Bot.Functions.sender(chat_id, f"@id{member_id} ({random.choice(config.pikap)})")

                            elif msg[1] in ["—à—É—Ç–∫–∞", "–ø—Ä–∏–∫–æ–ª", "–∞–Ω–µ–∫–¥–æ—Ç", "—Å–º–µ—à–Ω—è–≤–∫–∞"]:
                                Bot.Functions.sender(chat_id, Bot.Functions.parser_jocks())

                            elif msg[1] in ["–ø–æ–º–æ—â—å", "–ø–æ–º–æ–≥–∏", "—Ö–µ–ª–ø"]:
                                Bot.Functions.sender(chat_id, "üö¶–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n1. –° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"–ø–æ–º–æ—â—å\" —è –ø–æ–∫–∞–∂—É –≤–∞–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n2. –° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"–ø—Ä–∞–≤–∏–ª–∞\" –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –±–µ—Å–µ–¥—ã.\n \nüéÆ–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n1. –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"–º–æ–Ω–µ—Ç–∫–∞\" –∏ —è –∫–∏–Ω—É –º–æ–Ω–µ—Ç–∫—É. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Ä–ª–∞ –∏ —Ä–µ—à–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–∞, 50 –Ω–∞ 50.\n2. –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ: \"–≠–Ω–¥–∏ {–∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞}\" –∏ —è —Å—ã–≥—Ä–∞—é —Å –≤–∞–º–∏!\n \nü§£–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n1. –° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"—à—É—Ç–∫–∞\" —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –∞–Ω–µ–∫–¥–æ—Ç.\n2. –° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"–ø–æ–¥–∫–∞—Ç\" —è –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ –∫ –≤–∞–º –ø–æ–¥–∫–∞—á—É.\n \nüëÆ–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n1. –ö–æ–º–∞–Ω–¥–∞ \"–∫–∏–∫\" –∏—Å–∫–ª—é—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n \n‚ùó–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ. –ü—Ä–∏–º–µ—Ä:\n–í—ã: –≠–Ω–¥–∏ –±—É–º–∞–≥–∞\n–Ø: –ù–æ–∂–Ω–∏—Ü—ã!\n–Ø: –£—Ä–∞, —É—Ä–∞, —è –≤—ã–∏–≥—Ä–∞–ª!üòé)")

                            else:
                                Bot.Functions.sender(chat_id, "–î—É–º–∞—é...ü§î")
                                response_list.clear()
                                try:
                                    Bot.Functions.parserGPT(" ".join(msg[1:]))
                                    Bot.Functions.sender(chat_id, f"@id{member_id} ({response_list[0]})")
                                except:
                                    Bot.Functions.sender(chat_id, f"@id{member_id} ({response_list[0]})")

                        except IndexError:
                            Bot.Functions.sender(chat_id, "–ü—Ä–∏–≤–µ—Ç, —è –≠–Ω–¥–∏, –ø–æ–º–æ—â–Ω–∏–∫ –ø–µ—Ä–≤–æ–π —à–∫–æ–ª—ã.‚úåÔ∏è) –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"–ø–æ–º–æ—â—å\" –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è.")

            except Exception as e:
                Bot.Functions.sender(chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–µ–≥–æ –ø–∞–ø—ã: {e}")

if __name__ == '__main__':
    Bot.process()